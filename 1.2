#include <FastLED.h>

//defines for millis
int period = 1000;
unsigned long time_now = 0;

// Defines for fast led
#define NUM_LEDS 98
#define DATA_PIN 12

int levelStart = 0;
int levelEnd = 7;

// constants won't change. They're used here to set pin numbers:
const int buttonPin = 10;    // the number of the pushbutton pin
const int ledPin = 13;      // the number of the LED pin

// Variables will change:
int ledState = HIGH;         // the current state of the output pin
int buttonState;             // the current reading from the input pin
int lastButtonState = LOW;   // the previous reading from the input pin

// the following variables are unsigned longs because the time, measured in
// milliseconds, will quickly become a bigger number than can be stored in an int.
unsigned long lastDebounceTime = 0;  // the last time the output pin was toggled
unsigned long debounceDelay = 50;    // the debounce time; increase if the output flickers
// Define the array of leds

CRGB leds[NUM_LEDS];

void setup() { 
	Serial.begin(57600);
	Serial.println("resetting");
	LEDS.addLeds<WS2812,DATA_PIN,GRB>(leds,NUM_LEDS);
	LEDS.setBrightness(84);
  FastLED.clear();
  //Button.
  pinMode(buttonPin, INPUT);
  pinMode(ledPin, OUTPUT);

  // set initial LED state
  digitalWrite(ledPin, ledState);
}
void loop() {

bigPress();

//delayTime();
    
drawPlatform();

if(millis() >= time_now + period){
        time_now += period;
        Serial.println("Hello");
    }


}
void bigPress(){
  // read the state of the switch into a local variable:
  int reading = digitalRead(buttonPin);

  // check to see if you just pressed the button
  // (i.e. the input went from LOW to HIGH), and you've waited long enough
  // since the last press to ignore any noise:

  // If the switch changed, due to noise or pressing:
  if (reading != lastButtonState) {
    // reset the debouncing timer
    lastDebounceTime = millis();
  }

  if ((millis() - lastDebounceTime) > debounceDelay) {
    // whatever the reading is at, it's been there for longer than the debounce
    // delay, so take it as the actual current state:

    // if the button state has changed:
    if (reading != buttonState) {
      buttonState = reading;

      // only toggle the LED if the new button state is HIGH
      if (buttonState == HIGH) {
        ledState = !ledState;
      }
    }
  }

  // set the LED:
  digitalWrite(ledPin, ledState);

  // save the reading. Next time through the loop, it'll be the lastButtonState:
  lastButtonState = reading;
}


void drawPlatform(){



	// First slide the led in one direction
	for(int i = levelStart; i < levelEnd; i++) {
		// Set the i'th led to red 
		leds[i] = CRGB::Red;
		// Show the leds
		FastLED.show(); 
		// now that we've shown the leds, reset the i'th led to black
		leds[i-2] = CRGB::Black;
		// Wait a little bit before we loop around and do it again
		delay(200);

	}

	// Now go in the other direction.  
	for(int i = (levelEnd)-1; i >= levelStart; i--) {
		// Set the i'th led to red 
		leds[i] = CRGB::Blue;
		// Show the leds
		FastLED.show();
		// now that we've shown the leds, reset the i'th led to black
	  leds[i+2] = CRGB::Black;
		// Wait a little bit before we loop around and do it again
		delay(200);

	}
}
